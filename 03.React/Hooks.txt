What are hooks?
- react hooks are built-in functions that allows us to use the state and lifestyle methods within React components
- each lifecycle of a component is having 3 phases which include mount, unmount, and update
- using hook, all features of React can be used without writing class components


What are rules of hooks?
- only call hooks at the top level, which means we can't call hooks inside loops, conditions, or nested functions
- only call hooks from functional components


The use of useState hook
- the useState hook lets us define and update a state
- returns a stateful value and a function to update it


The use of useEffect hook
- the useEffect hook tells React that the component needs to do something after rendering
- React will remember the function you passed, and call it later after DOM updated
- by default, it runs both after the first render and after every update
- you can control the timing the useEffect hook runs by using a dependencies array that the useEffect hook takes as the second arguments
- if you want it to run only once, use an empty array
- the useEffect hook will execute the callback only if there is a change in dependencies
- the useEffect hook may return a clean-up function that runs before the component is removed from the UI


The use of useContext hook
- accepts a context object(the value returned from React.createContext) and returns the current context value for the context
- the current context value is determined by the value prop of the nearest <MyContext.Provider>


The use of custom hooks
- a custom hook is a function whose name starts with use and allows us to extract some components logic into a reusable function